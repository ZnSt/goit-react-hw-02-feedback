{"ast":null,"code":"var _jsxFileName = \"/Users/privetsvuemlord/Documents/react/goit-react-hw-02-feedback/src/components/App.jsx\";\nimport { Component } from \"react\";\nimport { Section } from \"./Section\";\nimport { Statistics } from \"./Statistics\";\nimport { Feedback } from \"./Feedback\";\nimport { Notification } from \"./Notification\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.onLeaveFeedback = option => {\n      this.setState(prevState => {\n        return {\n          [option]: prevState[option] + 1\n        };\n      });\n    };\n\n    this.countTotalFeedback = () => {\n      return this.state.good + this.state.neutral + this.state.bad;\n    };\n\n    this.countPositiveFeedbackPernectagle = () => {\n      return this.state.good / this.countTotalFeedback() * 100;\n    };\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        title: \"\",\n        children: /*#__PURE__*/_jsxDEV(Feedback, {\n          options: Object.keys(this.state),\n          onLeaveFeedback: this.onLeaveFeedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Section, {\n        children: this.countTotalFeedback() ? /*#__PURE__*/_jsxDEV(Statistics, {\n          good: good,\n          neutral: neutral,\n          bad: bad,\n          total: this.countTotalFeedback(),\n          positivePercentage: this.countPositiveFeedbackPernectagle()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Notification, {\n          message: \"No Feedback\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/Users/privetsvuemlord/Documents/react/goit-react-hw-02-feedback/src/components/App.jsx"],"names":["Component","Section","Statistics","Feedback","Notification","App","state","good","neutral","bad","onLeaveFeedback","option","setState","prevState","countTotalFeedback","countPositiveFeedbackPernectagle","render","Object","keys"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,YAAT,QAA6B,gBAA7B;;;AAEA,OAAO,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACjCM,KADiC,GACzB;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,GAAG,EAAE;AAHC,KADyB;;AAAA,SAOjCC,eAPiC,GAOdC,MAAD,IAAY;AAC5B,WAAKC,QAAL,CAAeC,SAAD,IAAe;AAC3B,eAAO;AACL,WAACF,MAAD,GAAUE,SAAS,CAACF,MAAD,CAAT,GAAoB;AADzB,SAAP;AAGD,OAJD;AAKD,KAbgC;;AAAA,SAejCG,kBAfiC,GAeZ,MAAM;AACzB,aAAO,KAAKR,KAAL,CAAWC,IAAX,GAAkB,KAAKD,KAAL,CAAWE,OAA7B,GAAuC,KAAKF,KAAL,CAAWG,GAAzD;AACD,KAjBgC;;AAAA,SAmBjCM,gCAnBiC,GAmBE,MAAM;AACvC,aAAQ,KAAKT,KAAL,CAAWC,IAAX,GAAkB,KAAKO,kBAAL,EAAnB,GAAgD,GAAvD;AACD,KArBgC;AAAA;;AAuBjCE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAET,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAAyB,KAAKH,KAApC;AACA,wBACE;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,KAAK,EAAE,EAAhB;AAAA,+BACE,QAAC,QAAD;AACE,UAAA,OAAO,EAAEW,MAAM,CAACC,IAAP,CAAY,KAAKZ,KAAjB,CADX;AAEE,UAAA,eAAe,EAAE,KAAKI;AAFxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAQE,QAAC,OAAD;AAAA,kBACG,KAAKI,kBAAL,kBACC,QAAC,UAAD;AACE,UAAA,IAAI,EAAEP,IADR;AAEE,UAAA,OAAO,EAAEC,OAFX;AAGE,UAAA,GAAG,EAAEC,GAHP;AAIE,UAAA,KAAK,EAAE,KAAKK,kBAAL,EAJT;AAKE,UAAA,kBAAkB,EAAE,KAAKC,gCAAL;AALtB;AAAA;AAAA;AAAA;AAAA,gBADD,gBASC,QAAC,YAAD;AAAc,UAAA,OAAO,EAAE;AAAvB;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,cARF;AAAA,oBADF;AAwBD;;AAjDgC","sourcesContent":["import { Component } from \"react\";\nimport { Section } from \"./Section\";\nimport { Statistics } from \"./Statistics\";\nimport { Feedback } from \"./Feedback\";\nimport { Notification } from \"./Notification\";\n\nexport class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  onLeaveFeedback = (option) => {\n    this.setState((prevState) => {\n      return {\n        [option]: prevState[option] + 1,\n      };\n    });\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.neutral + this.state.bad;\n  };\n\n  countPositiveFeedbackPernectagle = () => {\n    return (this.state.good / this.countTotalFeedback()) * 100;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title={\"\"}>\n          <Feedback\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.onLeaveFeedback}\n          ></Feedback>\n        </Section>\n\n        <Section>\n          {this.countTotalFeedback() ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPernectagle()}\n            ></Statistics>\n          ) : (\n            <Notification message={\"No Feedback\"}></Notification>\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}